========================Main.java=================
package HomeTask19;

import java.util.*;

public class Main {

private final static String PATH = "./src/HomeTask19/person.xml";
private final static String PATH_CHG_NAMES = "./src/HomeTask19/person_chg_names.xml";

	public static void main(String[] args) {
		Person person = new Person("Anna", "Bolick", 32, "Manager"); //create subordinates
		Person sub1 = new Person("Bill", "White", 25, "Medior");
		Person sub2 = new Person("Jack", "Black", 20, "Admin");
		List<Person> subordinates = new ArrayList<Person>();
		subordinates.add(sub1);
		subordinates.add(sub2);
		person.setSubordinates(subordinates);
		
		List<Person> listOfPersons = new ArrayList<Person>();    //create more persons
		Person person2 = new Person("Jill", "O'Hara", 43, "Director");
		Person person3 = new Person("James", "Bond", 45, "Spy");
		listOfPersons.add(person2);
		listOfPersons.add(person3);
		listOfPersons.add(person);
		
		PersonProcessing personProc = new PersonProcessing();
		personProc.exportToXML(person, PATH);
		
		Person fromXML = new Person();
		personProc.importFromXML(fromXML, PATH);
		System.out.println(fromXML);
//		System.out.println(fromXML.getSubordinates());
//		System.out.println(fromXML.getSubordinates().size());
		
//		personProc.exchangeAllNames(fromXML);
//		personProc.exportToXML(fromXML, PATH_CHG_NAMES);
	}

}
===================Person.java==========================
package HomeTask19;

import java.util.List;

import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElementWrapper;
import javax.xml.bind.annotation.XmlRootElement;

@XmlRootElement
public class Person {
private String name;
private String lastName;
private int age;
private String role;
private List<Person> subordinates;


public Person(){
	
}
public Person(String name, String lastName, int age, String role){
	this.name = name;
	this.lastName = lastName;
	this.age = age;
	this.role = role;
}

@Override
public String toString() {
	return "Person [name=" + name + ", lastName=" + lastName + ", age=" + age
			+ ", role=" + role + ", subordinates=" + subordinates + "]";
}

public String getName() {
	return name;
}
@XmlElement
public void setName(String name) {
	this.name = name;
}

public String getLastName() {
	return lastName;
}
@XmlElement
public void setLastName(String lastName) {
	this.lastName = lastName;
}

public int getAge() {
	return age;
}
@XmlElement
public void setAge(int age) {
	this.age = age;
}

public String getRole() {
	return role;
}
@XmlAttribute
public void setRole(String role) {
	this.role = role;
}
public List<Person> getSubordinates() {
	return subordinates;
}
@XmlElementWrapper(name = "subordinates")
@XmlElement (name = "subordinate")
public void setSubordinates(List<Person> subordinates) {
	this.subordinates = subordinates;
}
}
=====================PersonProcessing.java===================
package HomeTask19;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;

public class PersonProcessing {
public	PersonProcessing(){
		
	}
public void exportToXML(Person person, String path){
	try{
	
    FileWriter fw = new FileWriter(path, true);
    BufferedWriter bw = new BufferedWriter(fw);
	JAXBContext context = JAXBContext.newInstance(Person.class);
	Marshaller marshaller = context.createMarshaller();
	marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
	marshaller.marshal(person, bw);
    bw.close();
	}
	catch(Exception e){
		//System.out.println("Error with message: "+e.getMessage());
		e.printStackTrace();
	}
}
public void importFromXML(Person person, String path){
	try{
		FileReader fr = new FileReader(path);
	    BufferedReader br = new BufferedReader(fr);
		JAXBContext context = JAXBContext.newInstance(Person.class);
		Unmarshaller unmarshaller = context.createUnmarshaller();
        person = (Person) unmarshaller.unmarshal(br);
        System.out.println("dfsfsdfsdf");
		}
		catch(Exception e){
			//System.out.println("Error with message: "+e.getMessage());
			e.printStackTrace();
		}
}
public void exchangeAllNames(Person person){
	Person tmpPerson = new Person();
    this.exchangeName(person);
	for (int i = 0; i < person.getSubordinates().size(); i ++){
		tmpPerson = person.getSubordinates().get(i);
		this.exchangeName(tmpPerson);
		}
}
private void exchangeName(Person person){
	String tmp = "";
	tmp = person.getName();
	person.setName(person.getLastName());
	person.setLastName(tmp);
}
}
