==============LoggingChatServer.java==============
package HomeTask21_1;


import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class LoggingChatServer {

    final ExecutorService executor = Executors.newFixedThreadPool(20);
    List<Socket> allClients = new ArrayList<Socket>();

    public static void main(String[] args) throws IOException {
        new LoggingChatServer().start();
    }

    public void start() throws IOException {
        final ServerSocket serverSocket = new ServerSocket(20444);
        while(true) {
            final Socket clientSocket = serverSocket.accept();
            allClients.add(clientSocket);
            System.out.println(clientSocket);
            System.out.println(allClients.size());
            executor.execute(new MessageLogger(clientSocket, allClients));
        }

    }

}
===================MessageLogger.java=========================
package HomeTask21_1;

import java.io.*;
import java.net.Socket;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

public class MessageLogger implements Runnable {
    private final SimpleDateFormat timeStampFormat = new SimpleDateFormat("kk:mm:ss");

    private final Socket clientSocket;
    private List<Socket> allClients;

    public MessageLogger(final Socket clientSocket, List<Socket> allClients) {
        this.clientSocket = clientSocket;
        this.allClients = allClients;
    }

    @Override
    public void run() {
        log("== Connected ==");

        try (BufferedReader clientInputStream = new BufferedReader(
                                                    new InputStreamReader(
                                                            clientSocket.getInputStream()))) {

            while (true) {
                try {
                    final String input = clientInputStream.readLine();
                    if (input == null) {
                        break;
                    }
                for(int i = 0; i < allClients.size(); i ++){ 
                	System.out.println(allClients.get(i));
                	PrintWriter out = new PrintWriter (allClients.get(i).getOutputStream(),true);
                    out.println(input);
                }  
                    log(input);

                    
                } catch (IOException e) {
                    //e.printStackTrace();
                    break;
                }
            }

        } catch (final IOException e) {
             //e.printStackTrace();

            log("== Disconnected ==");
        }
    }

    private void log(final String text) {
        final String timeStamp = timeStampFormat.format(new Date());
        System.out.printf("[%s] %s: %s\n",
                timeStamp,
                clientSocket.getInetAddress().getHostAddress(),
                text);
    }
}
====================Login.java========================
package HomeTask21_1;

import java.util.ArrayList;

public class Login {
private String loginName;
private String password;
private ArrayList<String> loginList;
public ArrayList<String> getLoginList() {
	return loginList;
}
public Login(){
	loginList = new ArrayList<String>();
	loginList.add("Anna");
	loginList.add("Jack");
	loginList.add("Bob");
}
public void setLoginList(ArrayList<String> loginList) {

	this.loginList = loginList;
}
public String getLoginName() {
	return loginName;
}
public void setLoginName(String loginName) {
	this.loginName = loginName;
}
public String getPassword() {
	return password;
}
public void setPassword(String password) {
	this.password = password;
}
}
===============ChatMain.java===========
package HomeTask21_1;


import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.*;
import java.net.InetAddress;
import java.net.Socket;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import javax.swing.*;

public class ChatMain {

	public static void main(String[] args) throws IOException {
//////////////////////////////////////////////////////////////
		Login chatLogin = new Login();
		SwingUtilities.invokeLater(new Runnable() {

			public void run() {
				try{
				createAndShowGUI(chatLogin);
				}
				catch (Exception e){
					
				System.out.println(e.getMessage());	
					
				}
			}
		});

	}
	public static void createAndShowGUI(Login chatLogin) throws IOException{
///////////////////////////////////////////////////////////////////
		
		InetAddress ipAddress = InetAddress.getByName("127.0.0.1");
		System.out.println("Wellcome to client side");
		System.out.println("connecting to server...");
		Socket client = new Socket(ipAddress, 20444);
		System.out.println("Connected!");
		BufferedReader in = new BufferedReader(new InputStreamReader(
				client.getInputStream()));
		PrintWriter out = new PrintWriter(client.getOutputStream(), true);

/////////////////////////////////////////////////////////////////		
		
		
		final JFrame frame = new JFrame();
		final JList<String> chatList = new JList<String>();

		GridBagConstraints c = new GridBagConstraints();
		final JTextArea chatLog = new JTextArea();
		chatLog.setEditable(false);
		JScrollPane scroll = new JScrollPane(chatLog);
		JPanel mainPanel = new JPanel(new GridBagLayout());
		final TextField login = new TextField("Login");
		final TextField pass = new TextField("Pass");
		JLabel label = new JLabel("Login to chat:");
		JButton chatJoin = new JButton("Chat join");
		
		JPanel loginPanel = new JPanel();
        loginPanel.setLayout(new BoxLayout(loginPanel,  BoxLayout.PAGE_AXIS));
        
        label.setMaximumSize(new Dimension(80, 150));
        label.setAlignmentX(Component.CENTER_ALIGNMENT);
        login.setMaximumSize(new Dimension(80, 20));
        pass.setMaximumSize(new Dimension(80, 20));
        chatJoin.setAlignmentX(Component.CENTER_ALIGNMENT);

        loginPanel.add(label);
		loginPanel.add(login);
		loginPanel.add(pass);
		loginPanel.add(chatJoin);
		
		login.addMouseListener(new MouseAdapter(){
			public void mouseClicked(MouseEvent e){
				login.setText("");
			}
		});
		pass.addMouseListener(new MouseAdapter(){
			public void mouseClicked(MouseEvent e){
				pass.setText("");
				pass.setEchoChar('*');
			}
		});
		

		final JPanel panels  = new JPanel(new CardLayout());
		panels.add(loginPanel);
		panels.add(mainPanel);
		chatJoin.addActionListener(new ActionListener(){

			
			public void actionPerformed(ActionEvent arg0) {

				chatLogin.setLoginName(login.getText());
				chatLogin.setPassword(pass.getText());
				chatLogin.getLoginList().add(0, login.getText());
				String[] names = chatLogin.getLoginList().toArray(new String[chatLogin.getLoginList().size()]);
				chatList.setListData(names);
				CardLayout cl = (CardLayout) (panels.getLayout());
				cl.next(panels);
				
			}
			
		});
		
		c.gridx = 0;
		c.gridy = 0;
		c.gridwidth = 1;
		c.gridheight = 1;
		c.weightx = 0.7;
		c.weighty = 0.9;
		c.fill = GridBagConstraints.BOTH;

		mainPanel.add(scroll, c);
		

		chatList.setBorder(BorderFactory.createLineBorder(Color.BLUE));
        c.gridx = 1;
		c.gridy = 0;
		c.weightx = 0.3;
		c.weighty = 0.9;
		c.fill = GridBagConstraints.BOTH;
		mainPanel.add(chatList, c);
		
		final TextField message = new TextField("Enter message here..");
		message.addMouseListener(new MouseAdapter(){
			public void mouseClicked(MouseEvent e){
				message.setText("");
			}
		});

		c.gridx = 0;
		c.gridy = 1;
		c.weightx = 0.7;
		c.weighty = 0.1;
		c.fill = GridBagConstraints.BOTH;
		mainPanel.add(message, c);
		
		JButton buttonSend = new JButton();
		buttonSend.setText("Send");
        c.gridx = 1;
		c.gridy = 1;
		c.weightx = 0.3;
		c.weighty = 0.1;
		c.fill = GridBagConstraints.BOTH;
		mainPanel.add(buttonSend, c);

		buttonSend.addActionListener(new ActionListener() {

				public void actionPerformed(ActionEvent e){
				DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
				Date date = new Date();
				StringBuilder log = new StringBuilder(dateFormat.format(date)+" "+chatLogin.getLoginName()+": "+message.getText()+"\n");
				out.println(dateFormat.format(date)+" "+chatLogin.getLoginName()+": "+message.getText());
				StringBuilder fromServer = new StringBuilder();
	            //log.append(chatLog.getText());
//	            try{
//	            fromServer.append(in.readLine());
//	            }
//	            catch(Exception exc){
//	            	System.out.println(exc.getMessage());
//	            }
			    chatLog.setEditable(true);
			    fromServer.append("\n"+chatLog.getText());
			    chatLog.setText(fromServer.toString());
                //chatLog.setText(log.toString());
			    chatLog.setEditable(false);
				message.setText("");
				fromServer.delete(0, fromServer.length()-1);
			}
		});

		JMenuBar menuBar = new JMenuBar();
        JMenu menu = new JMenu("File");
        menuBar.add(menu);
        
        JMenuItem logSave = new JMenuItem("Save chat log");
        
        JMenuItem exit = new JMenuItem("Chat exit");
        exit.addActionListener(new ActionListener(){
        	public void actionPerformed(ActionEvent e){
        		try{
				in.close();
				out.close();
				client.close();
				System.exit(0);
				}
        		catch(Exception exc){

        			System.out.println(exc.getMessage());
        		}
        		
        	}
        });
        
        menu.add(logSave);
        menu.add(exit);
        
        
		frame.setJMenuBar(menuBar);
		frame.setLocationRelativeTo(null);
		
		frame.getContentPane().add(panels);
		
		frame.pack();
		frame.setSize(800, 400);
		frame.setVisible(true);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		ExecutorService executor = Executors.newFixedThreadPool(1);
		
			executor.submit(new Runnable(){
				public void run(){
					while(true){
					try{
					StringBuilder str = new StringBuilder(in.readLine());
					if (str!=null){
						str.append("\n"+chatLog.getText());
						chatLog.setText(str.toString());
					 }
					}
					catch(Exception e){
						System.out.println(e.getMessage());
					}
					}
				}
			});
	
	}	
}
