==========================Person.java===============================
package HomeTask17;

public class Person {
private String name;
private String lastName;
private int age;

public Person(String name, String lastName, int age){
	this.name = name;
	this.lastName = lastName;
	this.age = age;
}

@Override
public String toString() {
	return "Person [name=" + name + ", lastName=" + lastName + ", age=" + age
			+ "]\n";
}

public String getName() {
	return name;
}

public void setName(String name) {
	this.name = name;
}

public String getLastName() {
	return lastName;
}

public void setLastName(String lastName) {
	this.lastName = lastName;
}

public int getAge() {
	return age;
}

public void setAge(int age) {
	this.age = age;
}
}

==========================MainThread.java====================
package HomeTask17;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.Random;
import java.util.concurrent.*;

public class MainThread {

	final static int PROCESSING_QUEUE_LENGTH = 10;
	final ExecutorService executor = Executors.newFixedThreadPool(2);

	public static void main(String[] args) {

		BlockingQueue<Person> nameProcessingQueue = new ArrayBlockingQueue<Person>(PROCESSING_QUEUE_LENGTH);
		List<Person> processedNamesList = new ArrayList<Person>();

		new MainThread().start(nameProcessingQueue, processedNamesList);

	}



	public void start(BlockingQueue<Person> nameProcessingQueue, List<Person> processedNamesList){
		executor.execute(new MyRunnable(nameProcessingQueue));
        executor.execute(new MyRunnable_UpperCase(nameProcessingQueue, processedNamesList));
	}
}

========================MyRunnable.java=======================
package HomeTask17;

import java.util.Random;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;

public class MyRunnable implements Runnable {
	final static int PERSON_QUANTITY = 30;
	private BlockingQueue<Person> nameProcessingQueue;
	
	MyRunnable(BlockingQueue<Person> nameProcessingQueue) {
		this.nameProcessingQueue = nameProcessingQueue;

	}

	public void run() {
		fillNameProcessingQueue(nameProcessingQueue);
	}

	private void fillNameProcessingQueue(BlockingQueue<Person> nameProcessingQueue) {

		for (int i = 0; i < PERSON_QUANTITY; i++) {
			try {
				
				nameProcessingQueue.put(new Person(createRandomName(),createRandomName(), new Random().nextInt(100)));
			} 
			catch (Exception e) {
			}

		}
		System.out.println("Queue: \n" + nameProcessingQueue);
	}
	public String createRandomName() {
		StringBuilder name = new StringBuilder();
		Random rn = new Random();
		for (int i = 0; i < rn.nextInt(10) + 5; i++) {
			name.append((char) (rn.nextInt(25) + 97));

		}

		return name.toString();
	}
}

==========================MyRunnable_UpperCase.java============================
package HomeTask17;

import java.util.List;
import java.util.concurrent.BlockingQueue;

public class MyRunnable_UpperCase implements Runnable{
	final static int PROCESSING_QUEUE_LENGTH = 10;
	BlockingQueue<Person> nameProcessingQueue;
	List<Person> processedNamesList;
	MyRunnable_UpperCase(BlockingQueue<Person> nameProcessingQueue, List<Person> processedNamesList){
		this.nameProcessingQueue = nameProcessingQueue;
		this.processedNamesList = processedNamesList;
		
	}
	public void run(){
		changeNameToUpperCase(nameProcessingQueue, processedNamesList);
	}
	
	static void changeNameToUpperCase(BlockingQueue<Person> nameProcessingQueue, List<Person> processedNamesList) {
		Person tmp = new Person("", "", 0);
		for (int i = 0; i < PROCESSING_QUEUE_LENGTH; i++) {
			tmp = nameProcessingQueue.poll();
			tmp.setName(tmp.getName().toUpperCase());
			processedNamesList.add(tmp);
		}
		System.out.println("List: \n" + processedNamesList);
	}
}
